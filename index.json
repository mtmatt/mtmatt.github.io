[{"content":"Hi there! I am Matt Bleuet (mtmatt), a software developer and computer system researcher. Welcome to my personal website where I share my project overviews, blogs, and insights on various topics. Feel free to browse around!\n早安各位，這裡是博陸毅之島，我是一個軟體開發者與作業系統研究員。歡迎參觀這裡的一切，我會分享我參與的專案，以及一些不同主題的內容。\n","date":"27 October 2025","externalUrl":null,"permalink":"/","section":"","summary":"","title":"","type":"page"},{"content":"","date":"27 October 2025","externalUrl":null,"permalink":"/blogs/","section":"Blogs","summary":"","title":"Blogs","type":"blogs"},{"content":" Introduction # For those who are involved in Linux system development, compiling a Linux kernel should be a familiar task. However, for beginners like me, it is still quite challenging. This article shares my experience and the steps on how to compile the Linux kernel version 6.3.0+.\nWhy I Compile the Linux Kernel # I am participating in the Secure System Lab in NTU CSIE, and I am interested in Rust for Linux kind of stuff. To have a basic knowledge of how Rust for Linux works, I refer to our lab\u0026rsquo;s previous project (it\u0026rsquo;s a private repository, so I won\u0026rsquo;t link it here). Thus, I have to compile the Linux kernel with Rust support, along with the driver module developed by our lab.\nEnvironment Setup # Since I am working on a Fedora 42 workstation, I used virt manager to create a virtual machine. As the project specified, I first tried to install Ubuntu 20.04 LTS as the host machine; however, I encountered a lot of issues during the compilation process.\nDisk Space # Note that the Linux kernel 6.3.0+ with Rust support requires about 29GB of disk space. Thus, I recommended allocating at least 64GB for disk space to avoid running out of space, that would be awful.\nPackage loss # Some packages are missing, or the versions are too old. As an example, the clang version in Ubuntu 20.04 is 12 (installed via apt), but the least version required for the kernel version 6.3.0+ is 15. I have to install that specific version with apt install clang-15.\nNon-LTS version # At the beginning, I followed the project instructions to use Ubuntu 23.04 as the VM inside my Ubuntu 20.04. However, I found that there was almost no mirror remain for Ubuntu 23.04. After searching, I finally found it from old-releases.ubuntu.com. But still, the script provided by the project was not working because the script was still missing from my Ubuntu 20.04 host. Finally, since we are not using any specific features from Ubuntu 23.04, I decided to switch to Ubuntu 22.04 LTS.\nSwitch to Ubuntu 24.04 # After several trials and errors (even with Gemini 2.5 pro), I finally used Ubuntu 24.04 VM as the host, and Ubuntu 22.04 VM as the guest. Even though these modifications were not directly gave me a successful compilation, at least it finally worked.\nDependencies Installation # Before compiling the kernel, we need to install some libraries and tools. The following are some common dependencies.\napt-get update apt-get upgrade -y # Build tools and libraries apt-get install -y \\ build-essential \\ git \\ curl \\ wget \\ make \\ gcc \\ flex \\ bison \\ libncurses-dev \\ libelf-dev \\ libslang2-dev \\ cpio \\ bc \\ dwarves \\ pkg-config apt-get install -y libssl-dev # Build with LLVM apt-get install -y \\ clang-15 \\ llvm-15 \\ lld-15 \\ libclang-15-dev # Run VM apt-get install -y \\ qemu-kvm \\ libvirt-daemon-system \\ libvirt-clients \\ bridge-utils \\ gdb \\ openssh-server \\ lvm2 \\ mdadm There are also some Rust-related dependencies.\ncurl --proto \u0026#39;=https\u0026#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh source $HOME/.cargo/env rustup override set 1.66.0 The Linux Repository # Next, we need to clone the Linux kernel repository. I got it as a submodule from our lab\u0026rsquo;s repository. If you are using git submodule, the following can help you.\ngit submodule update --init --recursive It took me about two hours due to the network flow restriction in our dormitory. Then you can change to the Linux kernel directory.\ncd linux cp ../.config ./ make LLVM=1 rustavailable cargo install --locked --version $(scripts/min-tool-version.sh bindgen) bindgen-cli The .config file can be generated by make menuconfig or copied from elsewhere. The rustavailable target checks if the Rust toolchain is properly set up. In this case, we need the 1.66.0 version. The bindgen is a tool that generates Rust FFI (Foreign Function Interface) bindings with C libraries in the kernel.\nConfig for Rust # To enable Rust support in the kernel, you can use make menuconfig to open the configuration menu. Inside the menu, navigate to General setup -\u0026gt; Rust support and press Y to enable it. You can find this option only when the Rust toolchain is correctly set up.\nCompile the Kernel # Now we can finally compile the kernel with make.\nmake LLVM=-15 -j8 The LLVM=-15 flag tells the make to use LLVM version 15. In fact, if your default LLVM version is 15, you can also use LLVM=1 as an alternative.\nThe -j8 flag specifies the number of jobs that can run in parallel. You can adjust it according to your CPU (or vCPU) number for the host VM. It took me around 1 hour to finish the compilation.\nThe make will ask you some LLVM-related questions at the beginning. I used the default options.\nInstall the compiled Kernel # Although I did not do this step on my own, because our lab has written a script to utilize the new kernel in VM. Nonetheless, if you want to try your new kernel on your own machine, you can follow these steps.\nmake module_install make install Then, reboot your machine, and enter the boot menu Advanced Options for Ubuntu to select the new kernel.\nConclusion # Although the process so far seems not that difficult, I spent almost 30 hours to figure out the correct steps and environment. I hope this can help those who want to compile the Linux kernel with Rust support, especially for beginners like me.\nReferences # The Linux Kernel Rust Installation Enter BIOS on Virt-Manager How to debootstrap Ubuntu 13.04 on Ubuntu 23.04 Ubuntu Official Website ","date":"27 October 2025","externalUrl":null,"permalink":"/blogs/1761573591481-how-to-compile-linux-kernel/","section":"Blogs","summary":"","title":"Compilation Thoughts for Linux Kernel (with Rust Support)","type":"blogs"},{"content":"","date":"27 October 2025","externalUrl":null,"permalink":"/tags/kernel/","section":"Tags","summary":"","title":"Kernel","type":"tags"},{"content":"","date":"27 October 2025","externalUrl":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":"","date":"27 October 2025","externalUrl":null,"permalink":"/tags/system/","section":"Tags","summary":"","title":"System","type":"tags"},{"content":"","date":"27 October 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"24 October 2025","externalUrl":null,"permalink":"/tags/judge/","section":"Tags","summary":"","title":"Judge","type":"tags"},{"content":"","date":"24 October 2025","externalUrl":null,"permalink":"/tags/misc/","section":"Tags","summary":"","title":"Misc","type":"tags"},{"content":" Motivation # After being a TA in the DSA course and preparing the programming assignments, I realized the inconvenience of the existing DSA judge system. The existing judge system has several limitations, including bare metal installation, out of dated dependencies, and inconvenient task preparation.\nBesides, professors and our team want to add some new features to the system. However, after our team explored the code base of the existing system, we found that it may be easier to build a new one from scratch.\nFeatures # Our new judge system is containerized using Docker, which makes it easy to deploy and scale. It is built using a modern no-SQL database: MongoDB, which ensures that the system is more secure. It supports a slightly modified TPS (Task Preparation System), which enhances the task preparation workflow for TAs. My role in this project # I am the backend developer for the OwoJudge project. My responsibilities include providing backend APIs using Node.js and Express, setting up isolated sandboxes, and using the Dockerfile and Docker Compose for deployment.\nAdditionally, I decided to provide a CLI tool to use the judge system. The CLI tool is prepared for those who use Neovim or people who want to have a lightweight experience.\n","date":"24 October 2025","externalUrl":null,"permalink":"/projects/1760951509467-owojudge/","section":"Projects","summary":"","title":"OwoJudge","type":"projects"},{"content":"","date":"24 October 2025","externalUrl":null,"permalink":"/tags/programming/","section":"Tags","summary":"","title":"Programming","type":"tags"},{"content":"","date":"24 October 2025","externalUrl":null,"permalink":"/projects/","section":"Projects","summary":"","title":"Projects","type":"projects"},{"content":"","date":"24 October 2025","externalUrl":null,"permalink":"/tags/projects/","section":"Tags","summary":"","title":"Projects","type":"tags"},{"content":" 前言 # 之前曾經用過 Hexo 在 GitHub 上架設過個人網站。不過因為舊的架構並不完善，所以我打算在 GitHub 上架設一個工作流自動在我更新網站內容的時候部屬。所以我決定重新開始。剛好身邊的同學建議我可以改用 Hugo 以及 Blowfish ，可以更順利的更動頁面的風格。\nHugo? Hexo? # 這應該算是近年來比較流行的靜態網站框架，通常用在寫文章的網站中。簡單的概念是他會把你的 Markdown 原始檔編譯成 html \u0026amp; css ，所以我們只需要寫 Markdown 就可以完成文章的撰寫。這顯著的減少我們自行編寫 css 的時間，因為多半可以直接選擇一個你認為足夠好看的佈景主題，然後微調一些設定就好。\n關於 GitHub workflow ，其實 Hexo 與 Hugo 都有他們的一套處理方法。之所以選擇 Hugo 還是看上他的外觀自定義的難度。\nMarkdown # 關於 Markdown 用法的文章有很多，我就不再額外詳細說明。使用上相較於 html 會簡潔許多，也比較不會有 Deeply nested (深度嵌套？) 的情況出現。不過有些時候還是會需要輔以 html 才能更好看一些：例如表格，或是改變字的顏色。\n動機 # 或許是因為近來少了可以聽我分享事物的人吧？最近時常會有想要分享的事情如哽在喉，因為有些想要分享的事情正是跟我的朋友一起完成的，所以也沒什麼好說的？我想這是我最主要想要架設個人網站的原因，雖然也不見得會有人看到。此外，因為是分享在網路上，其實還是有很多說不出來的話。不過至少是可以在一些寫作的過程中重新審視自己，讓自己看見一些平常沒有發現的盲點。不僅如此，我也希望藉由這樣的方式鼓勵自己練習中英文寫作。\n困難 # 最大的困難主要有兩個：繪製網站相關的圖片、以及產出文章。我已經很久沒有使用口語以外的中文了，作業通常都是用英文、程式語言、以及數學語言所撰寫。或許有人會說那就都用英文就好了，不過至少在我看來，我使用中文可以表達出的精細程度依然高於英文。英文用於傳遞概念，中文用於傳達情感，目前大概是這樣的分工模式。\n博陸毅之島的由來 # 博陸毅取自矢車菊的法文 (Bleuet) 。當初我選這名字選了很久，結果放著放著就忘記原來是從哪裡來，只依稀記得是個紫色或藍色的花名。正逢 LLM 快速成長，我才得以找回原來的名稱。矢車菊的花語為純潔、天真或細膩，也象徵著希望與正義。而矢車菊在法國又象徵著每個在 1917 年參與尼維爾攻勢 (offensive Nivelle) ，這場行動葬送了很多剛滿 20 歲的法國青年，而藍色與法國軍隊的天空藍制服呼應。\nReferences # 矢車菊：探索這種花卉的語言與文化意義 黃昏賓果：一戰文化研究俱樂部 ","date":"24 October 2025","externalUrl":null,"permalink":"/blogs/1761292127765-move-my-articles-to-hugo/","section":"Blogs","summary":"","title":"移動我的個人網站到 Hugo","type":"blogs"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]